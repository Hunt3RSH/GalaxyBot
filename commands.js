import {
  sendChatMessage,
  updateChannel,
  isModerator,
  findCategoryId,
} from "./api.js";

const COMMANDS = {
  /**
   * –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  hello: {
    matcher: (content) => content === "!hello",
    handler: async (message, broadcasterUserId, accessToken) => {
      await sendChatMessage(
        broadcasterUserId,
        `–ü—Ä–∏–≤—ñ—Ç, ${message.sender.username}!`,
        accessToken,
        message.id
      );
    },
  },
  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ö–∞–æ—Å —Ä–æ–∑–¥–∞—á—ñ
   */
  galaxy: {
    matcher: (content) => content === "!galaxy",
    handler: async (message, broadcasterUserId, accessToken) => {
      await sendChatMessage(
        broadcasterUserId,
        `@${message.sender.username}, —Ç–µ–±–µ –¥–æ–¥–∞–Ω–æ –≤ —Ö–∞–æ—Å —Ä–æ–∑–¥–∞—á—ñ! üöÄ`,
        accessToken,
        message.id
      );
    },
  },
  /**
   * –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
   */
  info: {
    matcher: (content) => content === "!info",
    handler: async (message, broadcasterUserId, accessToken) => {
      await sendChatMessage(
        broadcasterUserId,
        `–Ø –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª—É ${process.env.KICK_CHANNEL_NAME}! –ü–∏—à–∏ !hello, !galaxy, !title –∞–±–æ !category –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó. üòé`,
        accessToken,
        message.id
      );
    },
  },
};

export async function handleCommand(
  message,
  broadcasterUserId,
  accessToken,
  channelId
) {
  const content = message.content.toLowerCase();

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
  for (const [name, { matcher, handler }] of Object.entries(COMMANDS)) {
    if (matcher(content)) {
      try {
        await handler(message, broadcasterUserId, accessToken, channelId);
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ ${name}:`, error);
      }
      return;
    }
  }
}
