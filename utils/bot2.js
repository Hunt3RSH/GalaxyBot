import dotenv from "dotenv";
import axios from "axios";

dotenv.config();

const ACCESS_TOKEN = process.env.ACCESS_TOKEN;
const CHANNEL_SLUG = process.env.CHANNEL_SLUG;

if (!ACCESS_TOKEN || !CHANNEL_SLUG) {
  console.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π ACCESS_TOKEN –∞–±–æ CHANNEL_SLUG");
  process.exit(1);
}

async function getChannelInfo() {
  try {
    const response = await axios.get(
      `https://api.kick.com/public/v1/channels?slug=${CHANNEL_SLUG}`,
      {
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          Accept: "*/*",
        },
      }
    );
    const channel = response.data.data?.[0];
    if (!channel) {
      console.error("–ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return null;
    }
    return channel;
  } catch (error) {
    console.error(
      "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É:",
      error.response?.data || error.message
    );
    return null;
  }
}

async function sendMessage(
  broadcasterUserId,
  message,
  replyToMessageId = null
) {
  try {
    const body = {
      broadcaster_user_id: broadcasterUserId,
      content: message,
      type: "user",
    };
    if (replyToMessageId) {
      body.reply_to_message_id = replyToMessageId;
    }

    const response = await axios.post(
      "https://api.kick.com/public/v1/chat",
      body,
      {
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          "Content-Type": "application/json",
          Accept: "*/*",
        },
      }
    );
    if (response.data.data?.is_sent) {
      console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: "${message}"`);
    } else {
      console.warn("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø–∏—Ç, –∞–ª–µ is_sent !== true");
    }
  } catch (error) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
      error.response?.data || error.message
    );
  }
}

export async function onMessage(msg) {
  const channel = await getChannelInfo();
  if (!channel) return;

  const broadcasterUserId = channel.broadcaster_user_id;

  if (msg.toLowerCase() === "!hello") {
    await sendMessage(broadcasterUserId, "–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –±–æ—Ç Kick!");
  }
}

export async function initBot() {
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –¢–µ—Å—Ç—É—î–º–æ –∫–æ–º–∞–Ω–¥—É '!hello'");
  await onMessage("!hello");
}
