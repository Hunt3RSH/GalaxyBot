import { createClient } from "@retconned/kick-js";
import dotenv from "dotenv";
import axios from "axios";

dotenv.config();

// –ö–µ—à –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const processedMessages = new Set();

async function checkToken(accessToken) {
  try {
    const response = await axios.get("https://api.kick.com/api/v2/user", {
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    });
    console.log("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", response.data);
    return response.data;
  } catch (error) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:",
      error.response?.data || error.message
    );
    console.error(
      "–¢–æ–∫–µ–Ω, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è:",
      accessToken.slice(0, 10) + "..."
    );
    return null;
  }
}

async function getChannelInfo(slug, accessToken) {
  try {
    const response = await axios.get(
      `https://api.kick.com/public/v1/channels?slug=${slug}`,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          Accept: "application/json",
        },
      }
    );
    const channel = response.data.data?.[0];
    if (!channel) {
      console.error("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return null;
    }
    console.log("–û—Ç—Ä–∏–º–∞–Ω–æ broadcaster_user_id:", channel.broadcaster_user_id);
    console.log("–û—Ç—Ä–∏–º–∞–Ω–æ chatroom_id:", channel.chatroom?.id);
    return {
      broadcaster_user_id: channel.broadcaster_user_id,
      chatroom_id: channel.chatroom?.id,
      bot_user_id: channel.user_id,
    };
  } catch (error) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É:",
      error.response?.data || error.message
    );
    return null;
  }
}

async function sendChatMessage(
  broadcasterUserId,
  content,
  accessToken,
  replyToMessageId = null
) {
  console.log(
    "–ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ broadcaster_user_id:",
    broadcasterUserId,
    "–í–º—ñ—Å—Ç:",
    content
  );
  try {
    const body = {
      broadcaster_user_id: broadcasterUserId,
      content: content,
      type: "user",
    };
    if (replyToMessageId) {
      body.reply_to_message_id = replyToMessageId;
    }

    const response = await axios.post(
      "https://api.kick.com/public/v1/chat",
      body,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      }
    );
    if (response.data.data?.is_sent) {
      console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: "${content}"`);
      return response.data;
    } else {
      console.warn(
        "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–π–Ω—è–≤ –∑–∞–ø–∏—Ç, –∞–ª–µ is_sent !== true:",
        response.data
      );
      return null;
    }
  } catch (error) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
      error.response?.data || error.message
    );
    return null;
  }
}

async function updateChannel(streamTitle, categoryId, accessToken) {
  try {
    const response = await axios.patch(
      `https://api.kick.com/api/v2/channels/${process.env.KICK_CHANNEL_SLUG}`,
      {
        category_id: categoryId,
        stream_title: streamTitle,
      },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      }
    );
    console.log("‚úÖ –ö–∞–Ω–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–æ:", response.data);
    return response.data;
  } catch (error) {
    console.error(
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É:",
      error.response?.data || error.message
    );
    if (error.response?.status === 401) {
      console.log("–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞...");
      const newToken = await refreshToken();
      if (newToken) {
        try {
          const retryResponse = await axios.patch(
            `https://api.kick.com/api/v2/channels/${process.env.KICK_CHANNEL_SLUG}`,
            {
              category_id: categoryId,
              stream_title: streamTitle,
            },
            {
              headers: {
                Authorization: `Bearer ${newToken}`,
                "Content-Type": "application/json",
                Accept: "application/json",
              },
            }
          );
          console.log(
            "‚úÖ –ö–∞–Ω–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:",
            retryResponse.data
          );
          return retryResponse.data;
        } catch (retryError) {
          console.error(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:",
            retryError.response?.data || retryError.message
          );
          return null;
        }
      }
    }
    return null;
  }
}

export async function startServer(accessToken) {
  console.log(
    "üöÄ –í–∏–∫–ª–∏–∫ startServer –∑ —Ç–æ–∫–µ–Ω–æ–º:",
    accessToken.slice(0, 10) + "..."
  );

  if (!process.env.KICK_CHANNEL_NAME) {
    console.error("‚ùå KICK_CHANNEL_NAME –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env");
    return;
  }
  if (!process.env.KICK_CHANNEL_SLUG) {
    console.error("‚ùå KICK_CHANNEL_SLUG –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env");
    return;
  }
  if (!accessToken) {
    console.error("‚ùå accessToken –Ω–µ –Ω–∞–¥–∞–Ω–æ");
    return;
  }

  console.log(
    `ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É: ${process.env.KICK_CHANNEL_NAME}`
  );

  const userData = await checkToken(accessToken);
  if (!userData) {
    console.error(
      "‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω"
    );
  }

  const channelInfo = await getChannelInfo(
    process.env.KICK_CHANNEL_SLUG,
    accessToken
  );
  if (!channelInfo) {
    console.error(
      "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ"
    );
  }
  const broadcasterUserId = channelInfo?.broadcaster_user_id;
  const chatroomId = channelInfo?.chatroom_id;
  const botUserId = channelInfo?.bot_user_id;

  if (broadcasterUserId) {
    await sendChatMessage(
      broadcasterUserId,
      "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞–ø–∏—à—ñ—Ç—å !hello, —â–æ–± –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏—Å—è.",
      accessToken
    );
  }

  const client = createClient(process.env.KICK_CHANNEL_NAME, {
    logger: true,
    readOnly: false,
  });

  console.log("–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ —Ç–æ–∫–µ–Ω–æ–º...");

  try {
    await client.login({
      type: "tokens",
      credentials: {
        bearerToken: accessToken,
      },
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error.message);
    return;
  }

  client.on("ready", () => {
    console.log(
      `‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —è–∫ ${client.user?.tag || "–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}`
    );
    console.log(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É: ${process.env.KICK_CHANNEL_NAME}`);
  });

  client.on("ChatMessage", async (message) => {
    console.log(
      `${message.sender.username}: ${message.content}, chatroom_id: ${message.chatroom_id}, message_id: ${message.id}, sender_id: ${message.sender.id}`
    );

    if (message.sender.id === botUserId) {
      console.log(
        `‚ÑπÔ∏è –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${message.sender.username}`
      );
      return;
    }

    const messageKey = `${message.sender.id}:${message.content}:${message.created_at}`;
    if (processedMessages.has(messageKey)) {
      console.log(`‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${messageKey} —É–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ, —ñ–≥–Ω–æ—Ä—É—î–º–æ`);
      return;
    }
    processedMessages.add(messageKey);
    setTimeout(() => processedMessages.delete(messageKey), 5 * 60 * 1000);

    if (message.content.toLowerCase().startsWith("!title ")) {
      const newTitle = message.content.slice(7).trim();
      if (newTitle) {
        try {
          await updateChannel(newTitle, 1, accessToken);
          await sendChatMessage(
            broadcasterUserId,
            `–ù–∞–∑–≤—É —Å—Ç—Ä—ñ–º—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${newTitle}`,
            accessToken,
            message.id
          );
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–∑–≤–∏:", error.message);
        }
      }
    }

    if (message.content.toLowerCase() === "!hello") {
      try {
        await sendChatMessage(
          broadcasterUserId,
          `–ü—Ä–∏–≤—ñ—Ç, ${message.sender.username}!`,
          accessToken,
          message.id
        );
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:", error.message);
      }
    }
  });

  client.on("pusher:connection_established", () => {});
  client.on("pusher_internal:subscription_succeeded", () => {});
  client.on("unknown", (event) => {
    console.log(`‚ÑπÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–¥—ñ—è: ${event.type}`);
  });

  client.on("error", (error) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞:", error.message);
  });
}
