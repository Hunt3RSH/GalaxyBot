import { createClient } from "@retconned/kick-js";
import dotenv from "dotenv";
import {
  checkToken,
  getChannelInfo,
  sendChatMessage,
  refreshToken,
} from "./api.js";
import { handleCommand } from "./commands.js";
import { REQUIRED_ENV, CACHE_CONFIG, BOT_CONFIG } from "./config.js";
import { appendToMentionsFile } from "./utils/saveToken.js";

dotenv.config();

// –ö–µ—à –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –∑–≥–∞–¥–æ–∫
const processedMessages = new Set();
const processedMentions = new Set();

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
let currentAccessToken = process.env.ACCESS_TOKEN;
let tokenInvalid = false;

async function attemptLogin(client, token) {
  try {
    await client.login({
      type: "tokens",
      credentials: { bearerToken: token },
    });
    console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
    return true;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error.message);
    return false;
  }
}

async function retryGetChannelInfo(slug, token, retries = 1) {
  let attempt = 0;
  while (attempt < retries) {
    console.log(
      `üì° Attempt ${attempt + 1} to fetch channelInfo for slug: ${slug}`
    );
    const channelInfo = await getChannelInfo(slug, token);
    if (channelInfo) return channelInfo;
    attempt++;
    if (attempt < retries) {
      console.log("‚è≥ Waiting 5ms before retry...");
      await new Promise((resolve) => setTimeout(resolve, 5));
      const newToken = await refreshToken();
      if (newToken) {
        currentAccessToken = newToken;
        token = newToken;
      } else {
        tokenInvalid = true;
      }
    }
  }
  console.error("‚ùå Failed to fetch channelInfo after retries.");
  return null;
}

export async function startServer(accessToken) {
  console.log(
    "üöÄ Starting server with token:",
    accessToken.slice(0, 10) + "..."
  );
  currentAccessToken = accessToken;
  tokenInvalid = false;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  for (const envVar of REQUIRED_ENV) {
    if (!process.env[envVar]) {
      console.error(`‚ùå ${envVar} not set in .env`);
      return;
    }
  }

  if (!accessToken) {
    console.error("‚ùå No accessToken provided");
    return;
  }

  console.log(
    `ü§ñ Initializing bot for channel: ${process.env.KICK_CHANNEL_NAME}`
  );

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  const userData = await checkToken(accessToken);
  if (!userData) {
    console.error("‚ö†Ô∏è Continuing without user data due to invalid token");
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–Ω–∞–ª
  const channelInfo = await retryGetChannelInfo(
    process.env.KICK_CHANNEL_SLUG,
    accessToken
  );
  if (!channelInfo) {
    console.error("‚ùå Stopping bot due to failure to fetch channelInfo");
    return;
  }
  const {
    broadcaster_user_id: broadcasterUserId,
    chatroom_id: chatroomId,
    bot_user_id: botUserId,
    channel_id: channelId,
  } = channelInfo;

  // –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  await sendChatMessage(
    broadcasterUserId,
    "[emote:39251:beeBobble]",
    currentAccessToken
  );

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
  const client = createClient(process.env.KICK_CHANNEL_NAME, {
    logger: true,
    readOnly: false,
  });

  // –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  if (!(await attemptLogin(client, accessToken))) {
    return;
  }

  // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 7 —Ö–≤–∏–ª–∏–Ω
  let isConnected = false;
  const periodicMessageInterval = setInterval(async () => {
    console.log(
      `‚ÑπÔ∏è Checking periodic message: isConnected=${isConnected}, broadcasterUserId=${broadcasterUserId}, tokenInvalid=${tokenInvalid}`
    );
    if (!isConnected || !broadcasterUserId || tokenInvalid) {
      console.log(
        "‚ÑπÔ∏è Periodic message skipped: bot not connected, no broadcasterUserId, or invalid token"
      );
      if (tokenInvalid) {
        console.error("‚ö†Ô∏è Token is invalid. Please reauthorize via /login.");
      }
      return;
    }
    try {
      const result = await sendChatMessage(
        broadcasterUserId,
        BOT_CONFIG.PERIODIC_MESSAGE_TEXT,
        currentAccessToken
      );
      if (!result) {
        console.log("‚ÑπÔ∏è Attempting token refresh due to failed message...");
        const newToken = await refreshToken();
        if (newToken) {
          currentAccessToken = newToken;
          await attemptLogin(client, newToken);
          await sendChatMessage(
            broadcasterUserId,
            BOT_CONFIG.PERIODIC_MESSAGE_TEXT,
            currentAccessToken
          );
        } else {
          tokenInvalid = true;
        }
      }
      console.log(
        `‚ÑπÔ∏è Periodic message sent: "${BOT_CONFIG.PERIODIC_MESSAGE_TEXT}"`
      );
    } catch (error) {
      console.error("‚ùå Error sending periodic message:", error.message);
    }
  }, BOT_CONFIG.PERIODIC_MESSAGE_INTERVAL);

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  client.on("ready", () => {
    console.log(`‚úÖ Bot connected as ${client.user?.tag || "unknown user"}`);
    console.log(`Connected to channel: ${process.env.KICK_CHANNEL_NAME}`);
    isConnected = true;
  });

  client.on("ChatMessage", async (message) => {
    console.log(
      `${message.sender.username}: ${message.content}, chatroom_id: ${message.chatroom_id}, message_id: ${message.id}, sender_id: ${message.sender.id}`
    );

    // –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if (message.sender.id === botUserId) {
      console.log(`‚ÑπÔ∏è Ignoring own message from ${message.sender.username}`);
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    const messageKey = `${message.sender.id}:${message.content}:${message.created_at}`;
    if (processedMessages.has(messageKey)) {
      console.log(`‚ÑπÔ∏è Message ${messageKey} already processed, ignoring`);
      return;
    }
    processedMessages.add(messageKey);
    setTimeout(
      () => processedMessages.delete(messageKey),
      CACHE_CONFIG.MESSAGE_TTL
    );

    // –û–±—Ä–æ–±–∫–∞ –∑–≥–∞–¥–æ–∫ @Hunt3R_WTF
    if (message.content.toLowerCase().includes("@hunt3r_wtf")) {
      const mentionKey = `${message.sender.id}:${message.created_at}`;
      if (!processedMentions.has(mentionKey)) {
        processedMentions.add(mentionKey);
        setTimeout(
          () => processedMentions.delete(mentionKey),
          CACHE_CONFIG.MESSAGE_TTL
        );

        const timestamp = new Date()
          .toISOString()
          .replace("T", " ")
          .slice(0, 19);
        appendToMentionsFile("Hunt3R_WTF", message.sender.username, timestamp);
      }
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    try {
      await handleCommand(
        message,
        broadcasterUserId,
        currentAccessToken,
        channelId
      );
    } catch (error) {
      console.error("‚ùå Error processing command:", error.message);
      if (error.response?.status === 401) {
        console.log("‚ÑπÔ∏è Attempting token refresh due to 401 in command...");
        const newToken = await refreshToken();
        if (newToken) {
          currentAccessToken = newToken;
          await attemptLogin(client, newToken);
          await handleCommand(
            message,
            broadcasterUserId,
            currentAccessToken,
            channelId
          );
        } else {
          tokenInvalid = true;
        }
      }
    }
  });

  client.on("pusher:connection_established", () => {});
  client.on("pusher_internal:subscription_succeeded", () => {});
  client.on("unknown", (event) => {
    console.log(`‚ÑπÔ∏è Unknown event: ${event.type}`);
  });

  client.on("error", async (error) => {
    console.error("‚ùå Client error:", error.message);
    isConnected = false;
    if (
      error.message.includes("401") ||
      error.message.includes("Unauthorized")
    ) {
      console.log("‚ÑπÔ∏è Attempting token refresh due to client error...");
      const newToken = await refreshToken();
      if (newToken) {
        currentAccessToken = newToken;
        if (await attemptLogin(client, newToken)) {
          isConnected = true;
        }
      } else {
        tokenInvalid = true;
      }
    }
  });

  // –û—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
  client.on("close", async () => {
    console.log("‚ÑπÔ∏è Bot disconnected, clearing periodic message");
    clearInterval(periodicMessageInterval);
    isConnected = false;
    if (!tokenInvalid) {
      console.log("‚ÑπÔ∏è Attempting reconnect in 10 seconds...");
      await new Promise((resolve) => setTimeout(resolve, 10000));
      if (await attemptLogin(client, currentAccessToken)) {
        isConnected = true;
      }
    } else {
      console.error(
        "‚ö†Ô∏è Reconnect skipped due to invalid token. Please reauthorize via /login."
      );
    }
  });
}
