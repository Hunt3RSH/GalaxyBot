import { createClient } from "@retconned/kick-js";
import dotenv from "dotenv";
import {
  checkToken,
  getChannelInfo,
  sendChatMessage,
  refreshToken,
} from "./api.js";
import { handleCommand } from "./commands.js";
import { REQUIRED_ENV, CACHE_CONFIG, BOT_CONFIG } from "./config.js";
import { appendToMentionsFile } from "./utils/saveToken.js";

dotenv.config();

// –ö–µ—à –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ –∑–≥–∞–¥–æ–∫
const processedMessages = new Set();
const processedMentions = new Set();

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
let currentAccessToken = process.env.ACCESS_TOKEN;

async function attemptLogin(client, token) {
  try {
    await client.login({
      type: "tokens",
      credentials: { bearerToken: token },
    });
    console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
    return true;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error.message);
    return false;
  }
}

async function retryGetChannelInfo(slug, token, retries = 3) {
  let attempt = 0;
  while (attempt < retries) {
    console.log(
      `‚ÑπÔ∏è –°–ø—Ä–æ–±–∞ ${attempt + 1} –æ—Ç—Ä–∏–º–∞—Ç–∏ channelInfo –¥–ª—è slug: ${slug}`
    );
    const channelInfo = await getChannelInfo(slug, token);
    if (channelInfo) return channelInfo;
    attempt++;
    if (attempt < retries) {
      console.log("‚ÑπÔ∏è –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...");
      await new Promise((resolve) => setTimeout(resolve, 5000));
      const newToken = await refreshToken();
      if (newToken) {
        currentAccessToken = newToken;
        token = newToken;
      }
    }
  }
  console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ channelInfo –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±");
  return null;
}

export async function startServer(accessToken) {
  console.log(
    "üöÄ –í–∏–∫–ª–∏–∫ startServer –∑ —Ç–æ–∫–µ–Ω–æ–º:",
    accessToken.slice(0, 10) + "..."
  );
  currentAccessToken = accessToken;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  for (const envVar of REQUIRED_ENV) {
    if (!process.env[envVar]) {
      console.error(`‚ùå ${envVar} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env`);
      return;
    }
  }

  if (!accessToken) {
    console.error("‚ùå accessToken –Ω–µ –Ω–∞–¥–∞–Ω–æ");
    return;
  }

  console.log(
    `ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É: ${process.env.KICK_CHANNEL_NAME}`
  );

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  const userData = await checkToken(accessToken);
  if (!userData) {
    console.error(
      "‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω"
    );
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–Ω–∞–ª
  const channelInfo = await retryGetChannelInfo(
    process.env.KICK_CHANNEL_SLUG,
    accessToken
  );
  if (!channelInfo) {
    console.error("‚ùå –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç —á–µ—Ä–µ–∑ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ channelInfo");
    return;
  }
  const {
    broadcaster_user_id: broadcasterUserId,
    chatroom_id: chatroomId,
    bot_user_id: botUserId,
    channel_id: channelId,
  } = channelInfo;

  // –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  await sendChatMessage(
    broadcasterUserId,
    "[emote:39251:beeBobble]",
    currentAccessToken
  );

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
  const client = createClient(process.env.KICK_CHANNEL_NAME, {
    logger: true,
    readOnly: false,
  });

  // –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  if (!(await attemptLogin(client, accessToken))) {
    return;
  }

  // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
  let isConnected = false;
  const periodicMessageInterval = setInterval(async () => {
    console.log(
      `‚ÑπÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: isConnected=${isConnected}, broadcasterUserId=${broadcasterUserId}`
    );
    if (!isConnected || !broadcasterUserId) {
      console.log(
        "‚ÑπÔ∏è –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ: –±–æ—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π broadcasterUserId"
      );
      return;
    }
    try {
      const result = await sendChatMessage(
        broadcasterUserId,
        BOT_CONFIG.PERIODIC_MESSAGE_TEXT,
        currentAccessToken
      );
      if (!result) {
        console.log("‚ÑπÔ∏è –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ–≤–¥–∞–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...");
        const newToken = await refreshToken();
        if (newToken) {
          currentAccessToken = newToken;
          await attemptLogin(client, newToken);
          await sendChatMessage(
            broadcasterUserId,
            BOT_CONFIG.PERIODIC_MESSAGE_TEXT,
            currentAccessToken
          );
        }
      }
      console.log(
        `‚ÑπÔ∏è –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: "${BOT_CONFIG.PERIODIC_MESSAGE_TEXT}"`
      );
    } catch (error) {
      console.error(
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        error.message
      );
    }
  }, BOT_CONFIG.PERIODIC_MESSAGE_INTERVAL);

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  client.on("ready", () => {
    console.log(
      `‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —è–∫ ${client.user?.tag || "–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}`
    );
    console.log(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É: ${process.env.KICK_CHANNEL_NAME}`);
    isConnected = true;
  });

  client.on("ChatMessage", async (message) => {
    console.log(
      `${message.sender.username}: ${message.content}, chatroom_id: ${message.chatroom_id}, message_id: ${message.id}, sender_id: ${message.sender.id}`
    );

    // –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if (message.sender.id === botUserId) {
      console.log(
        `‚ÑπÔ∏è –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${message.sender.username}`
      );
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    const messageKey = `${message.sender.id}:${message.content}:${message.created_at}`;
    if (processedMessages.has(messageKey)) {
      console.log(`‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${messageKey} —É–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ, —ñ–≥–Ω–æ—Ä—É—î–º–æ`);
      return;
    }
    processedMessages.add(messageKey);
    setTimeout(
      () => processedMessages.delete(messageKey),
      CACHE_CONFIG.MESSAGE_TTL
    );

    // –û–±—Ä–æ–±–∫–∞ –∑–≥–∞–¥–æ–∫ @Hunt3R_WTF
    if (message.content.toLowerCase().includes("@hunt3r_wtf")) {
      const mentionKey = `${message.sender.id}:${message.created_at}`;
      if (!processedMentions.has(mentionKey)) {
        processedMentions.add(mentionKey);
        setTimeout(
          () => processedMentions.delete(mentionKey),
          CACHE_CONFIG.MESSAGE_TTL
        );

        const timestamp = new Date()
          .toISOString()
          .replace("T", " ")
          .slice(0, 19);
        appendToMentionsFile("Hunt3R_WTF", message.sender.username, timestamp);
      }
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    try {
      await handleCommand(
        message,
        broadcasterUserId,
        currentAccessToken,
        channelId
      );
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏:", error.message);
      if (error.response?.status === 401) {
        console.log("‚ÑπÔ∏è –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ 401 —É –∫–æ–º–∞–Ω–¥—ñ...");
        const newToken = await refreshToken();
        if (newToken) {
          currentAccessToken = newToken;
          await attemptLogin(client, newToken);
          await handleCommand(
            message,
            broadcasterUserId,
            currentAccessToken,
            channelId
          );
        }
      }
    }
  });

  client.on("pusher:connection_established", () => {});
  client.on("pusher_internal:subscription_succeeded", () => {});
  client.on("unknown", (event) => {
    console.log(`‚ÑπÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–¥—ñ—è: ${event.type}`);
  });

  client.on("error", async (error) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞:", error.message);
    isConnected = false;
    if (
      error.message.includes("401") ||
      error.message.includes("Unauthorized")
    ) {
      console.log("‚ÑπÔ∏è –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –∫–ª—ñ—î–Ω—Ç–∞...");
      const newToken = await refreshToken();
      if (newToken) {
        currentAccessToken = newToken;
        if (await attemptLogin(client, newToken)) {
          isConnected = true;
        }
      }
    }
  });

  // –û—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
  client.on("close", async () => {
    console.log("‚ÑπÔ∏è –ë–æ—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –æ—á–∏—â–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
    clearInterval(periodicMessageInterval);
    isConnected = false;
    // –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    console.log("‚ÑπÔ∏è –°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...");
    await new Promise((resolve) => setTimeout(resolve, 10000));
    if (await attemptLogin(client, currentAccessToken)) {
      isConnected = true;
    }
  });
}
